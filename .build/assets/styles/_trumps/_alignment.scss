// Get all 'breakpoints' values from settings.json.
// Convert them to EM if they're numeric, otherwise use them as-is.
:root {
	@each $size, $sizeValue in $breakpoints {
		@if type-of($sizeValue) == 'number' and (unit($sizeValue) == '' or unit($sizeValue) == 'px') {
			--constraint-#{$size}: #{($sizeValue/16)+0em};
		} @else {
			--constraint-#{$size}: #{$sizeValue};
		}
	}
}

.alignleft,
.alignright {
	position: relative;
	z-index: 1;
	margin-bottom: var(--unit);
}

.alignleft {
	float: left;
	margin-right: var(--unit);
}

.alignright {
	float: right;
	margin-left: var(--unit);
}

.aligncenter {
	clear: both;
	display: block;
	margin-left: auto;
	margin-right: auto;
}

.aligncenter,
.alignleft,
.alignnone,
.alignright {
	img {
		display: block;
	}

	a,
	img {
		margin: 0;
	}
}

figure.alignleft,
figure.alignright,
img.alignleft,
img.alignright {
	max-width: 50%;
}

.alignwide {
	max-width: calc(100vw - (var(--c-constraint-padding-side) * 2));

	@media screen and (min-width: #{breakpoints(wide)}) {
		max-width: var(--constraint-wide);

		&.has-parallax {
			background-position-x: calc(var(--constraint-wide) / 2);
		}
	}
}

.alignfull {
	max-width: 100vw;
	width: calc(100vw + var(--c-constraint-padding-side)); // Offset container padding
	margin-left: calc(var(--c-constraint-padding-side) * -1); // Offset container padding
	@media screen and (min-width: #{breakpoints(narrow)}) {
		width: 100vw;
	}
}

@include context-edit {
	.wp-block {
		max-width: var(--constraint-narrow);

		&[data-align="wide"] {
			max-width: var(--constraint-wide);
		}

		&[data-align="full"] {
			max-width: var(--constraint-full);
		}
	}
}
