@mixin for-screen-min($name, $sizes: $breakpoints) {
    $min: device-breakpoints-min($name, $sizes);

    @if type-of($min) == 'number' {
        @if unit($min) == '' {
            @media screen and (min-width: ($min/map-get($rem-base, value))+0em) {
                @content;
            }
        } @else {
            @media screen and (min-width: $min) {
                @content;
            }
        }
    } @else {
        @content;
    }
}

@mixin for-screen-max($name, $sizes: $breakpoints) {
    $max: device-breakpoints-max($name, $sizes);

    @if type-of($max) == 'number' {
        @if unit($max) == '' {
            @media screen and (max-width: ($max/map-get($rem-base, value))+0em) {
                @content;
            }
        } @else {
            @media screen and (max-width: $max) {
                @content;
            }
        }
    } @else {
        @content;
    }
}

@mixin for-screen($name, $sizes: $breakpoints) {
    @include for-screen-min($name, $sizes) {
        @include for-screen-max($name, $sizes) {
            @content;
        }
    }
}

/**
 * Use in order to make a set of rules only apply above
 * or below a certain breakpoint.
 * Standard usage:

 @include breakpoint(tablet){
 	// Applies to screen sizes tablet and LARGER
 }

 @include breakpoint(tablet up){
 	// Applies to screen sizes tablet and LARGER
 }

 @include breakpoint(tablet down){
 	// Applies to screen sizes tablet and SMALLER
 }
 *
 **/

@mixin breakpoint($value) {
    $direction: if(length($value) > 1, nth($value, 2), up);
    $name: if(length($value) > 1, nth($value, 1), $value);

    @if type-of(map-get($breakpoints, $name)) != 'null' {
        @if $direction == down {
            @include for-screen-max($name) {
                @content;
            }
        } @else {
            @include for-screen-min($name) {
                @content;
            }
        }
    } @else {
        @debug 'Breakpoint ' + $value + ' not defined';
    }
}
